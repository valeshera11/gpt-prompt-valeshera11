name: NodeJS with Webpack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Build
      run: |
        npm install
        npx webpack


                    - name: Node.js ortamını kurun
  kullanımlar: actions/setup-node@v4.1.0
  ile:
    # Npmrc'de always-auth'ı ayarlayın.
    always-auth: # isteğe bağlı, varsayılan değer false
    # Sürüm Kullanılacak sürümün belirtimi. Örnekler: 12.x, 10.15.1, >=10.15.0.
    düğüm sürümü: # isteğe bağlı
    # Kullanılacak sürümün Spec'ini içeren dosya. Örnekler: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # isteğe bağlı
    # Node'un kullanacağı hedef mimari. Örnekler: x86, x64. Varsayılan olarak sistem mimarisini kullanacaktır.
    mimari: # isteğe bağlı
    # Eylemin sürüm özelliğini karşılayan en son kullanılabilir sürümü denetlemesini istiyorsanız bu seçeneği ayarlayın.
    son durumu kontrol et: # isteğe bağlı
    # Auth için kurulacak isteğe bağlı kayıt defteri. Kayıt defterini proje düzeyinde .npmrc ve .yarnrc dosyasına ayarlayacak ve auth'ı env.NODE_AUTH_TOKEN'dan okuyacak şekilde ayarlayacaktır.
    kayıt-url'si: # isteğe bağlı
    # Kapsamlı kayıt defterlerine karşı kimlik doğrulama için isteğe bağlı kapsam. GitHub Paketleri kayıt defterini (https://npm.pkg.github.com/) kullanırken depo sahibine geri dönülecektir.
    kapsam: # isteğe bağlı
    # Node-versions'dan node dağıtımlarını çekmek için kullanılır. Varsayılan bir değer olduğundan, bu genellikle kullanıcı tarafından sağlanmaz. Bu eylemi github.com'da çalıştırırken, varsayılan değer yeterlidir. GHES'te çalıştırırken, hız sınırlaması yaşıyorsanız github.com için kişisel bir erişim belirteci geçirebilirsiniz.
    token: # isteğe bağlı, varsayılan ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Varsayılan dizinde önbelleğe alma için bir paket yöneticisi belirtmek için kullanılır. Desteklenen değerler: npm, yarn, pnpm.
    önbellek: # isteğe bağlı
    # Bir bağımlılık dosyasının yolunu belirtmek için kullanılır: package-lock.json, yarn.lock, vb. Birden fazla bağımlılığı önbelleğe almak için joker karakterleri veya dosya adları listesini destekler.
    önbellek-bağımlılık-yolu: # isteğe bağlı



                      - isim: Bir Yapı Eseri Yükle
  kullanımlar: actions/upload-artifact@v4.4.3
  ile:
    # Eser adı
    isim: # isteğe bağlı, varsayılanı eserdir
    # Ne yükleneceğini açıklayan bir dosya, dizin veya joker karakter deseni
    yol:
    # Sağlanan yol kullanılarak hiçbir dosya bulunamazsa istenen davranış.
Mevcut Seçenekler:
  uyar: Bir uyarı çıkışı ver ancak eylemi başarısız kılma
  hata: Eylemi bir hata mesajıyla başarısız kıl
  görmezden gel: Herhangi bir uyarı veya hata çıkışı verme, eylem başarısız olmaz

    if-no-files-found: # isteğe bağlı, varsayılan uyarıdır
    # Eserin gün cinsinden sona ereceği süre. 0, varsayılan saklamanın kullanıldığı anlamına gelir.
Minimum 1 gün. Depo ayarları sayfasından değiştirilmediği sürece maksimum 90 gün.

    saklama günleri: # isteğe bağlı
    # Zlib'in eser arşivine uygulanacak sıkıştırma düzeyi. Değer 0 ile 9 arasında değişebilir: - 0: Sıkıştırma yok - 1: En iyi hız - 6: Varsayılan sıkıştırma (GNU Gzip ile aynı) - 9: En iyi sıkıştırma Daha yüksek düzeyler daha iyi sıkıştırmayla sonuçlanacaktır ancak tamamlanması daha uzun sürecektir. Kolayca sıkıştırılamayan büyük dosyalar için, önemli ölçüde daha hızlı yüklemeler için 0 değeri önerilir.

    sıkıştırma seviyesi: # isteğe bağlı, varsayılan 6'dır
    # Doğruysa, eşleşen bir ada sahip bir eser, yenisi yüklenmeden önce silinir. Yanlışsa, verilen ad için bir eser zaten varsa eylem başarısız olur. Eser yoksa başarısız olmaz.

    üzerine yaz: # isteğe bağlı, varsayılan değer false
    # True ise, gizli dosyalar esere dahil edilecektir. False ise, gizli dosyalar eserden hariç tutulacaktır.

    include-hidden-files: # isteğe bağlı, varsayılanı false

            - adı: Go ortamını kur
  kullanımlar: actions/setup-go@v5.1.0
  ile:
    # Gerekiyorsa indirip kullanabileceğiniz Go sürümü. Semver spec ve aralıklarını destekler. Bu seçeneği tek tırnak işaretleri içine aldığınızdan emin olun.
    go-version: # isteğe bağlı
    # go.mod veya go.work dosyasının yolu.
    go-version-file: # isteğe bağlı
    # Eylemin her zaman sürüm özelliğini karşılayan en son kullanılabilir sürümü kontrol etmesini istiyorsanız bu seçeneği doğru olarak ayarlayın
    son durumu kontrol et: # isteğe bağlı
    # Go dağıtımlarını go-versions'dan çekmek için kullanılır. Varsayılan bir değer olduğundan, bu genellikle kullanıcı tarafından sağlanmaz. Bu eylemi github.com'da çalıştırırken, varsayılan değer yeterlidir. GHES'te çalıştırırken, hız sınırlaması yaşıyorsanız github.com için kişisel bir erişim belirteci geçirebilirsiniz.
    token: # isteğe bağlı, varsayılan ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Önbelleğe almanın gerekli olup olmadığını belirtmek için kullanılır. Önbelleğe almayı etkinleştirmek istiyorsanız true olarak ayarlayın.
    önbellek: # isteğe bağlı, varsayılanı doğrudur
    # Bir bağımlılık dosyasının yolunu belirtmek için kullanılır - go.sum
    önbellek-bağımlılık-yolu: # isteğe bağlı
    # Go to use için hedef mimari. Örnekler: x86, x64. Varsayılan olarak sistem mimarisini kullanacaktır.
    mimari: # isteğe bağlı
          
          
